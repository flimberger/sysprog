Pufferstatus:
	Clean: Puffer kann gefahrlos überschrieben werden.
	Dirty: Es befinden sich noch nicht gelesene oder geschriebene
		Daten im Puffer.

makebuf:
	Reserviert eine Buffer-Struktur mittels malloc und ein Speichersegment
	mittels posix_memalign. Setzt die Speichergröße in der Buffer-Struktur.
	Der Dateideskriptor auf -1 gesetzt und das flags-Wort auf 0, damit der
	leere Puffer nicht verwendet wird. Gibt einen Zeiger auf den
	reservierten Puffer zurück.

initbuf:
	Verbindet einen bereits bestehenden Puffer mit einem bereits geöffneten
	Dateideskriptor. Damit können bereits reservierte Puffer
	wiederverwendet werden. Setzt die flags entsprechend dem Dateimodus,
	setzt die Zeiger entsprechend der Puffergröße und markiert den Puffer
	als aktiv und überschreibbar.

bopen:
	Gibt einen fertigen Puffer für eine Datei zurück. Der Puffer wird
	mittels makebuf alloziert, wobei die Standard-Puffergröße verwendet
	wird. Die Datei wird im angegebenen Modus geöffnet und mit initbuf
	dem Puffer zugeordnet.

termbuf:
	Flusht den Buffer und deaktiviert ihn, indem der Dateideskriptor auf
	-1 und die Flags auf 0 gesetzt werden.

freebuf:
	Gibt den Speicherplatz des Puffers frei.

bclose:
	flusht den Puffer und schließt die Datei, danach wird der Speicher
	freigegeben.

bgetchar:
	Wenn der nächste Character vor dem Ende des Primärbuffers steht,
	wird dieser zurückgegeben und der Zeiger inkrementiert.

	Wenn der nächste Character hinter dem Ende des Primärbuffers steht,
	wird geprüft, ob der Pufferstatus "Clean" ist. Ist dies der Fall,
	wird der Sekundärpuffer neu befüllt. Schlägt diese Aktion fehl,
	wird "EOF" zurückgegeben.
	Danach wird überprüft, ob der Abstand zwischen Beginn und Ende des
	Sekundärpuffers größer ist als Bungetsize. Ist dies nicht der Fall,
	dann werden Bungetsize Bytes vom Ende des Primärpuffers an dessen
	Anfang kopiert und dahinter der Inhalt des Sekundärpuffers.
	Das Ende des Primärpuffers wird auf die letzte Position der
	kopierten Daten gesetzt.
	Der Status wird darauf hin wieder auf Clean gesetzt, da der
	Sekundärpuffer wieder überschrieben werden kann.
	Ansonsten werden die Zeiger auf Beginn und Ende von Primär- und
	Sekundärpuffer ausgetauscht.
	In jedem Fall wird der Zeiger auf das Nächste Zeichen auf den
	Beginn des Primärpuffers gesetzt und ein Sprung an den Beginn
	der Routine gemacht, damit das nächste Zeichen zurückgegeben wird.

bungetchar:
	Wenn das nächste Zeichen hinter dem Beginn des Primärpuffers steht,
	wird lediglich der Zeiger darauf dekrementiert.
	Ist dies nicht der Fall, aber der Status des Puffers ist nicht "Clean",
	dann werden die Pufferzeiger getauscht und der Zeiger für das nächste
	Zeichen wird auf das Ende des (neuen) Primärpuffers gesetzt.
	In anderen Fällen wird "EOF" zurückgegeben, um einen Misserfolg zu
	signalisieren.

fillbuf:
	Füllt den sekundären Puffer, wenn der Status Clean ist.
	Setzt den Endezeiger auf das aktuelle Ende der validen Daten.
	Wenn ein Lesefehler auftritt, oder der Status Dirty ist, wird
	EOF zurückgegeben, ansonsten 0.

bflus:
	stub

